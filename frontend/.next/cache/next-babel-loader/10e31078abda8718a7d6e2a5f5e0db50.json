{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", {\n    className: \"container m-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: props.data\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n}; // Index.getInitialProps = async () => {\n//   const response = await fetch(\"http://localhost:5500/api/letter/1\");\n//   const data = await response.json();\n//   let formattedData = data[0].text.replace(/\\r/g, '<p class=\"mb-2\"></p>');\n//   let formattedData2 = formattedData.replace(\n//     /\\t/g,\n//     '<span class=\"pl-4\"></span>'\n//   );\n//   return { data: formattedData2 };\n// };\n\n\nIndex.getInitialProps = function _callee() {\n  var response, data, textToArray, tab, lineBreak, openParagraph, i;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:5500/api/letter/1\"));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          data = _context.sent;\n          textToArray = data[0].text.split(\"\");\n          console.log(textToArray);\n          tab = /\\t/g;\n          lineBreak = /\\r/g;\n          openParagraph = false;\n\n          for (i = 0; i < textToArray.length; i++) {\n            if (textToArray[i].match(tab) && openParagraph == false) {\n              textToArray[i] = '<span class=\"pl-4\">'; // console.log(textToArray[i] + \"tab\");\n            } else if (textToArray[i].match(tab) && openParagraph == true) {\n              textToArray[i] = '</p><span class=\"pl-4\">';\n              openParagraph = false;\n            } else if (textToArray[i].match(lineBreak)) {\n              // textToArray[i - 1] = \"</span>\";\n              textToArray[i] = \"</span><p>\";\n              openParagraph = true; // console.log(textToArray[i] + \"lineBreak\");\n            }\n          }\n\n          console.log(textToArray);\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js"],"names":["fetch","Fragment","Index","props","__html","data","getInitialProps","response","json","textToArray","text","split","console","log","tab","lineBreak","openParagraph","i","length","match"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AACrB,SACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAED,KAAK,CAACE;AAAhB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAcD,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAH,KAAK,CAACI,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACCN,KAAK,CAAC,oCAAD,CADN;;AAAA;AAChBO,UAAAA,QADgB;AAAA;AAAA,2CAEHA,QAAQ,CAACC,IAAT,EAFG;;AAAA;AAEhBH,UAAAA,IAFgB;AAGlBI,UAAAA,WAHkB,GAGJJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,IAAR,CAAaC,KAAb,CAAmB,EAAnB,CAHI;AAItBC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACMK,UAAAA,GALgB,GAKV,KALU;AAMhBC,UAAAA,SANgB,GAMJ,KANI;AAOlBC,UAAAA,aAPkB,GAOF,KAPE;;AAQtB,eAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACS,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,gBAAIR,WAAW,CAACQ,CAAD,CAAX,CAAeE,KAAf,CAAqBL,GAArB,KAA6BE,aAAa,IAAI,KAAlD,EAAyD;AACvDP,cAAAA,WAAW,CAACQ,CAAD,CAAX,GAAiB,qBAAjB,CADuD,CAEvD;AACD,aAHD,MAGO,IAAIR,WAAW,CAACQ,CAAD,CAAX,CAAeE,KAAf,CAAqBL,GAArB,KAA6BE,aAAa,IAAI,IAAlD,EAAwD;AAC7DP,cAAAA,WAAW,CAACQ,CAAD,CAAX,GAAiB,yBAAjB;AACAD,cAAAA,aAAa,GAAG,KAAhB;AACD,aAHM,MAGA,IAAIP,WAAW,CAACQ,CAAD,CAAX,CAAeE,KAAf,CAAqBJ,SAArB,CAAJ,EAAqC;AAC1C;AACAN,cAAAA,WAAW,CAACQ,CAAD,CAAX,GAAiB,YAAjB;AACAD,cAAAA,aAAa,GAAG,IAAhB,CAH0C,CAK1C;AACD;AACF;;AACDJ,UAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AAvBsB,2CAwBf;AAAEJ,YAAAA,IAAI,EAAEA;AAAR,WAxBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AA2BA,eAAeH,KAAf","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nconst Index = props => {\n  return (\n    <div className=\"container m-4\">\n      <div dangerouslySetInnerHTML={{ __html: props.data }} />\n      {/* {props.data.map(letter => {\n        return (\n          <div key={letter.letter_id}>\n            <p>{letter.text}</p>\n            <br />\n            <p>{letter.fromFirstName}</p>\n          </div>\n        );\n      })} */}\n    </div>\n  );\n};\n\n// Index.getInitialProps = async () => {\n//   const response = await fetch(\"http://localhost:5500/api/letter/1\");\n//   const data = await response.json();\n//   let formattedData = data[0].text.replace(/\\r/g, '<p class=\"mb-2\"></p>');\n//   let formattedData2 = formattedData.replace(\n//     /\\t/g,\n//     '<span class=\"pl-4\"></span>'\n//   );\n//   return { data: formattedData2 };\n// };\n\nIndex.getInitialProps = async () => {\n  const response = await fetch(\"http://localhost:5500/api/letter/1\");\n  const data = await response.json();\n  let textToArray = data[0].text.split(\"\");\n  console.log(textToArray);\n  const tab = /\\t/g;\n  const lineBreak = /\\r/g;\n  let openParagraph = false;\n  for (let i = 0; i < textToArray.length; i++) {\n    if (textToArray[i].match(tab) && openParagraph == false) {\n      textToArray[i] = '<span class=\"pl-4\">';\n      // console.log(textToArray[i] + \"tab\");\n    } else if (textToArray[i].match(tab) && openParagraph == true) {\n      textToArray[i] = '</p><span class=\"pl-4\">';\n      openParagraph = false;\n    } else if (textToArray[i].match(lineBreak)) {\n      // textToArray[i - 1] = \"</span>\";\n      textToArray[i] = \"</span><p>\";\n      openParagraph = true;\n\n      // console.log(textToArray[i] + \"lineBreak\");\n    }\n  }\n  console.log(textToArray);\n  return { data: data };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}