{"ast":null,"code":"var _jsxFileName = \"/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nconst Index = props => {\n  return __jsx(\"div\", {\n    className: \"container m-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: props.data\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n}; // Index.getInitialProps = async () => {\n//   const response = await fetch(\"http://localhost:5500/api/letter/1\");\n//   const data = await response.json();\n//   let formattedData = data[0].text.replace(/\\r/g, '<p class=\"mb-2\"></p>');\n//   let formattedData2 = formattedData.replace(\n//     /\\t/g,\n//     '<span class=\"pl-4\"></span>'\n//   );\n//   return { data: formattedData2 };\n// };\n\n\nIndex.getInitialProps = async () => {\n  const response = await fetch(\"http://localhost:5500/api/letter/1\");\n  const data = await response.json();\n  let textToArray = data[0].text.split(\"\");\n  let testText = \"\\tMonday \\tMay 9\\rMrs. Jervis\\rDear Madam,\\rThe Dr. pronounced\\rVery regard\\r\\tTruly yours,\\r\\tJ. H. Sullivan\"; // <span class=\"pl-4\">Monday </span><span class=\"pl-4\">May 9</span><p> Mrs. Jervis</p><p>Dear Madam,\n  // </p><p>The Dr. pronounced</p><p>Very regard</p><p><span class=\"pl-4\">Truly yours,\n  // </span></p><p><span span class=\"pl-4\">J. H. Sullivan</span></p>\n  // <p><span>\n  // <p>\n  // <span>\n\n  let testTextToArray = testText.split(\"\");\n  let shortTextToArray = textToArray.slice(1, 85);\n  const tab = /\\t/g;\n  const lineBreak = /\\r/g;\n  let paragraphOpen = false;\n  let spanOpen = false; // console.log(testTextToArray);\n\n  let inputArray = testTextToArray;\n\n  for (let i = 0; i < inputArray.length; i++) {\n    if (!spanOpen) {\n      if (!paragraphOpen && inputArray[i] == \"\\t\" && inputArray[i - 1] == \"</span></p>\") {\n        paragraphOpen = true;\n        spanOpen = true;\n        inputArray[i] = '<p><span class=\"pl-4\">';\n      }\n\n      if (inputArray[i] == \"\\t\") {\n        spanOpen = true;\n        inputArray[i] = '<span class=\"pl-4\">';\n      }\n    }\n\n    if (spanOpen && !paragraphOpen) {\n      if (testTextToArray[i] == \"\\r\") {\n        spanOpen = false;\n        paragraphOpen = true;\n        testTextToArray[i] = \"</span><p>\";\n      }\n\n      if (inputArray[i] == \"\\t\") {\n        inputArray[i] = '</span><span class=\"pl-4\">';\n      }\n    }\n\n    if (!paragraphOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"<p>\";\n      }\n    }\n\n    if (paragraphOpen && !spanOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"</p><p>\";\n      }\n\n      if (inputArray[i] == \"\\t\" && inputArray[i + 1] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"</p>\";\n      }\n    }\n\n    if (i == inputArray.length - 1) {\n      if (paragraphOpen && spanOpen) {\n        inputArray.push(\"</span></p>\");\n        paragraphOpen = false;\n        spanOpen = false;\n      }\n\n      if (paragraphOpen) {\n        inputArray.push(\"</p>\");\n        paragraphOpen = false;\n      }\n\n      if (spanOpen) {\n        inputArray.push(\"</span>\");\n        spanOpen = false;\n      }\n    }\n\n    if (spanOpen && paragraphOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = false;\n        spanOpen = false;\n        inputArray[i] = \"</span></p>\";\n      }\n    }\n  }\n\n  console.log(inputArray);\n  return {\n    data: data\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js"],"names":["fetch","Fragment","Index","props","__html","data","getInitialProps","response","json","textToArray","text","split","testText","testTextToArray","shortTextToArray","slice","tab","lineBreak","paragraphOpen","spanOpen","inputArray","i","length","push","console","log"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nconst Index = props => {\n  return (\n    <div className=\"container m-4\">\n      <div dangerouslySetInnerHTML={{ __html: props.data }} />\n      {/* {props.data.map(letter => {\n        return (\n          <div key={letter.letter_id}>\n            <p>{letter.text}</p>\n            <br />\n            <p>{letter.fromFirstName}</p>\n          </div>\n        );\n      })} */}\n    </div>\n  );\n};\n\n// Index.getInitialProps = async () => {\n//   const response = await fetch(\"http://localhost:5500/api/letter/1\");\n//   const data = await response.json();\n//   let formattedData = data[0].text.replace(/\\r/g, '<p class=\"mb-2\"></p>');\n//   let formattedData2 = formattedData.replace(\n//     /\\t/g,\n//     '<span class=\"pl-4\"></span>'\n//   );\n//   return { data: formattedData2 };\n// };\n\nIndex.getInitialProps = async () => {\n  const response = await fetch(\"http://localhost:5500/api/letter/1\");\n  const data = await response.json();\n  let textToArray = data[0].text.split(\"\");\n  let testText =\n    \"\\tMonday \\tMay 9\\rMrs. Jervis\\rDear Madam,\\rThe Dr. pronounced\\rVery regard\\r\\tTruly yours,\\r\\tJ. H. Sullivan\";\n  // <span class=\"pl-4\">Monday </span><span class=\"pl-4\">May 9</span><p> Mrs. Jervis</p><p>Dear Madam,\n  // </p><p>The Dr. pronounced</p><p>Very regard</p><p><span class=\"pl-4\">Truly yours,\n  // </span></p><p><span span class=\"pl-4\">J. H. Sullivan</span></p>\n\n  // <p><span>\n  // <p>\n  // <span>\n  let testTextToArray = testText.split(\"\");\n  let shortTextToArray = textToArray.slice(1, 85);\n  const tab = /\\t/g;\n  const lineBreak = /\\r/g;\n  let paragraphOpen = false;\n  let spanOpen = false;\n  // console.log(testTextToArray);\n\n  let inputArray = testTextToArray;\n\n  for (let i = 0; i < inputArray.length; i++) {\n    if (!spanOpen) {\n      if (\n        !paragraphOpen &&\n        inputArray[i] == \"\\t\" &&\n        inputArray[i - 1] == \"</span></p>\"\n      ) {\n        paragraphOpen = true;\n        spanOpen = true;\n        inputArray[i] = '<p><span class=\"pl-4\">';\n      }\n      if (inputArray[i] == \"\\t\") {\n        spanOpen = true;\n        inputArray[i] = '<span class=\"pl-4\">';\n      }\n    }\n    if (spanOpen && !paragraphOpen) {\n      if (testTextToArray[i] == \"\\r\") {\n        spanOpen = false;\n        paragraphOpen = true;\n        testTextToArray[i] = \"</span><p>\";\n      }\n      if (inputArray[i] == \"\\t\") {\n        inputArray[i] = '</span><span class=\"pl-4\">';\n      }\n    }\n    if (!paragraphOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"<p>\";\n      }\n    }\n    if (paragraphOpen && !spanOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"</p><p>\";\n      }\n      if (inputArray[i] == \"\\t\" && inputArray[i + 1] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"</p>\";\n      }\n    }\n    if (i == inputArray.length - 1) {\n      if (paragraphOpen && spanOpen) {\n        inputArray.push(\"</span></p>\");\n        paragraphOpen = false;\n        spanOpen = false;\n      }\n      if (paragraphOpen) {\n        inputArray.push(\"</p>\");\n        paragraphOpen = false;\n      }\n      if (spanOpen) {\n        inputArray.push(\"</span>\");\n        spanOpen = false;\n      }\n    }\n    if (spanOpen && paragraphOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = false;\n        spanOpen = false;\n        inputArray[i] = \"</span></p>\";\n      }\n    }\n  }\n\n  console.log(inputArray);\n  return { data: data };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}