{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", {\n    className: \"container m-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: props.data\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n}; // Index.getInitialProps = async () => {\n//   const response = await fetch(\"http://localhost:5500/api/letter/1\");\n//   const data = await response.json();\n//   let formattedData = data[0].text.replace(/\\r/g, '<p class=\"mb-2\"></p>');\n//   let formattedData2 = formattedData.replace(\n//     /\\t/g,\n//     '<span class=\"pl-4\"></span>'\n//   );\n//   return { data: formattedData2 };\n// };\n\n\nIndex.getInitialProps = function _callee() {\n  var response, data, textToArray, testText, testTextToArray, tab, lineBreak, paragraphOpen, spanOpen, i;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:5500/api/letter/1\"));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          data = _context.sent;\n          textToArray = data[0].text.split(\"\");\n          testText = \"\\tMonday \\tMay 9\\rMrs. Jervis\\rDear Madam,\\rThe Dr. pronounced\\rVery regard\\r\\tTruly yours,\\r\\tJ. H. Sullivan\"; // <span class=\"pl-4\">Monday </span><span class=\"pl-4\">May 9</span><p> Mrs. Jervis</p><p>Dear Madam,\n          // </p><p>The Dr. pronounced</p><p>Very regard</p><p><span span class=\"pl-4\">Truly yours,\n          // </span></p><p><span span class=\"pl-4\">J. H. Sullivan</span></p>\n          // <p><span>\n          // <p>\n          // <span>\n\n          testTextToArray = testText.split(\"\");\n          tab = /\\t/g;\n          lineBreak = /\\r/g;\n          paragraphOpen = false;\n          spanOpen = false; // console.log(testTextToArray);\n\n          for (i = 0; i < testTextToArray.length; i++) {\n            if (!spanOpen) {\n              if (testTextToArray[i] == \"\\t\") {\n                testTextToArray[i] = '<span class=\"pl-4\">';\n                spanOpen = true;\n              }\n            }\n\n            if (spanOpen) {\n              if (testTextToArray[i] == \"\\r\") {\n                testTextToArray[i] = \"</span><p>\" + \" \" + \"spanOpen: \" + spanOpen.toString() + \" & \" + \"paragraphOpen: \" + paragraphOpen.toString();\n                spanOpen = false;\n                paragraphOpen = true;\n              }\n\n              if (testTextToArray[i] == \"\\t\") {\n                testTextToArray[i] = '</span><span class=\"pl-4\">' + \" \" + \"spanOpen: \" + spanOpen.toString() + \" & \" + \"paragraphOpen: \" + paragraphOpen.toString();\n              }\n            }\n\n            if (!paragraphOpen) {\n              if (testTextToArray[i] == \"\\r\") {\n                testTextToArray[i] = \"<p>\" + \" \" + \"spanOpen: \" + spanOpen.toString() + \" & \" + \"paragraphOpen: \" + paragraphOpen.toString();\n                paragraphOpen = true;\n              }\n            }\n\n            if (paragraphOpen) {\n              if (testTextToArray[i] == \"\\r\") {\n                testTextToArray[i] = \"</p><p>\";\n                paragraphOpen = true;\n              }\n\n              if (testTextToArray[i] == \"\\t\" && testTextToArray[i + 1] == \"\\r\") {\n                testTextToArray[i] = \"</p>\";\n                paragraphOpen = true;\n              }\n            }\n\n            if (i == testTextToArray.length - 1) {\n              if (paragraphOpen && spanOpen) {\n                testTextToArray.push(\"</span></p>\");\n                paragraphOpen = false;\n                spanOpen = false;\n              }\n\n              if (paragraphOpen) {\n                testTextToArray.push(\"</p>\");\n                paragraphOpen = false;\n              }\n\n              if (spanOpen) {\n                testTextToArray.push(\"</span>\");\n                spanOpen = false;\n              }\n            }\n\n            if (spanOpen && paragraphOpen) {\n              if (testTextToArray[i] == \"\\r\") {\n                testTextToArray[i] = \"</span></p>\";\n                paragraphOpen = false;\n                spanOpen = false;\n              }\n            }\n          } // for (let i = 0; i < testTextToArray.length; i++) {\n          //   if (testTextToArray[i].match(tab) && paragraphOpen == false) {\n          //     testTextToArray[i] = '<span class=\"pl-4\">';\n          //     // console.log(testTextToArray[i] + \"tab\");\n          //   } else if (testTextToArray[i].match(tab) && paragraphOpen == true) {\n          //     testTextToArray[i] = '</p><span class=\"pl-4\">';\n          //     paragraphOpen = false;\n          //   } else if (testTextToArray[i].match(lineBreak)) {\n          //     // textToArray[i - 1] = \"</span>\";\n          //     testTextToArray[i] = \"</span><p>\";\n          //     paragraphOpen = true;\n          //     // console.log(testTextToArray[i] + \"lineBreak\");\n          //   }\n          // }\n\n\n          console.log(testTextToArray);\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js"],"names":["fetch","Fragment","Index","props","__html","data","getInitialProps","response","json","textToArray","text","split","testText","testTextToArray","tab","lineBreak","paragraphOpen","spanOpen","i","length","toString","push","console","log"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nconst Index = props => {\n  return (\n    <div className=\"container m-4\">\n      <div dangerouslySetInnerHTML={{ __html: props.data }} />\n      {/* {props.data.map(letter => {\n        return (\n          <div key={letter.letter_id}>\n            <p>{letter.text}</p>\n            <br />\n            <p>{letter.fromFirstName}</p>\n          </div>\n        );\n      })} */}\n    </div>\n  );\n};\n\n// Index.getInitialProps = async () => {\n//   const response = await fetch(\"http://localhost:5500/api/letter/1\");\n//   const data = await response.json();\n//   let formattedData = data[0].text.replace(/\\r/g, '<p class=\"mb-2\"></p>');\n//   let formattedData2 = formattedData.replace(\n//     /\\t/g,\n//     '<span class=\"pl-4\"></span>'\n//   );\n//   return { data: formattedData2 };\n// };\n\nIndex.getInitialProps = async () => {\n  const response = await fetch(\"http://localhost:5500/api/letter/1\");\n  const data = await response.json();\n  let textToArray = data[0].text.split(\"\");\n  let testText =\n    \"\\tMonday \\tMay 9\\rMrs. Jervis\\rDear Madam,\\rThe Dr. pronounced\\rVery regard\\r\\tTruly yours,\\r\\tJ. H. Sullivan\";\n  // <span class=\"pl-4\">Monday </span><span class=\"pl-4\">May 9</span><p> Mrs. Jervis</p><p>Dear Madam,\n  // </p><p>The Dr. pronounced</p><p>Very regard</p><p><span span class=\"pl-4\">Truly yours,\n  // </span></p><p><span span class=\"pl-4\">J. H. Sullivan</span></p>\n\n  // <p><span>\n  // <p>\n  // <span>\n  let testTextToArray = testText.split(\"\");\n  const tab = /\\t/g;\n  const lineBreak = /\\r/g;\n  let paragraphOpen = false;\n  let spanOpen = false;\n  // console.log(testTextToArray);\n\n  for (let i = 0; i < testTextToArray.length; i++) {\n    if (!spanOpen) {\n      if (testTextToArray[i] == \"\\t\") {\n        testTextToArray[i] = '<span class=\"pl-4\">';\n        spanOpen = true;\n      }\n    }\n    if (spanOpen) {\n      if (testTextToArray[i] == \"\\r\") {\n        testTextToArray[i] =\n          \"</span><p>\" +\n          \" \" +\n          \"spanOpen: \" +\n          spanOpen.toString() +\n          \" & \" +\n          \"paragraphOpen: \" +\n          paragraphOpen.toString();\n        spanOpen = false;\n        paragraphOpen = true;\n      }\n      if (testTextToArray[i] == \"\\t\") {\n        testTextToArray[i] =\n          '</span><span class=\"pl-4\">' +\n          \" \" +\n          \"spanOpen: \" +\n          spanOpen.toString() +\n          \" & \" +\n          \"paragraphOpen: \" +\n          paragraphOpen.toString();\n      }\n    }\n    if (!paragraphOpen) {\n      if (testTextToArray[i] == \"\\r\") {\n        testTextToArray[i] =\n          \"<p>\" +\n          \" \" +\n          \"spanOpen: \" +\n          spanOpen.toString() +\n          \" & \" +\n          \"paragraphOpen: \" +\n          paragraphOpen.toString();\n        paragraphOpen = true;\n      }\n    }\n    if (paragraphOpen) {\n      if (testTextToArray[i] == \"\\r\") {\n        testTextToArray[i] = \"</p><p>\";\n        paragraphOpen = true;\n      }\n      if (testTextToArray[i] == \"\\t\" && testTextToArray[i + 1] == \"\\r\") {\n        testTextToArray[i] = \"</p>\";\n        paragraphOpen = true;\n      }\n    }\n    if (i == testTextToArray.length - 1) {\n      if (paragraphOpen && spanOpen) {\n        testTextToArray.push(\"</span></p>\");\n        paragraphOpen = false;\n        spanOpen = false;\n      }\n      if (paragraphOpen) {\n        testTextToArray.push(\"</p>\");\n        paragraphOpen = false;\n      }\n      if (spanOpen) {\n        testTextToArray.push(\"</span>\");\n        spanOpen = false;\n      }\n    }\n    if (spanOpen && paragraphOpen) {\n      if (testTextToArray[i] == \"\\r\") {\n        testTextToArray[i] = \"</span></p>\";\n        paragraphOpen = false;\n        spanOpen = false;\n      }\n    }\n  }\n\n  // for (let i = 0; i < testTextToArray.length; i++) {\n  //   if (testTextToArray[i].match(tab) && paragraphOpen == false) {\n  //     testTextToArray[i] = '<span class=\"pl-4\">';\n  //     // console.log(testTextToArray[i] + \"tab\");\n  //   } else if (testTextToArray[i].match(tab) && paragraphOpen == true) {\n  //     testTextToArray[i] = '</p><span class=\"pl-4\">';\n  //     paragraphOpen = false;\n  //   } else if (testTextToArray[i].match(lineBreak)) {\n  //     // textToArray[i - 1] = \"</span>\";\n  //     testTextToArray[i] = \"</span><p>\";\n  //     paragraphOpen = true;\n\n  //     // console.log(testTextToArray[i] + \"lineBreak\");\n  //   }\n  // }\n  console.log(testTextToArray);\n  return { data: data };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}