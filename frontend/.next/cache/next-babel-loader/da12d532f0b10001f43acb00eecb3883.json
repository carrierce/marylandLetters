{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", {\n    className: \"container m-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: props.data\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }), props.data.map(function (letter) {\n    return __jsx(\"div\", {\n      key: letter.letter_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, letter.text), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, letter.fromFirstName));\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var response, data, textToArray, testText, testTextToArray, paragraphOpen, spanOpen, inputArray, i;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:5500/api/letter/1\"));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          data = _context.sent;\n          textToArray = data[0].text.split(\"\");\n          testText = \"\\tMonday \\tMay 9\\rMrs. Jervis\\rDear Madam,\\rThe Dr. pronounced\\rVery regard\\r\\tTruly yours,\\r\\tJ. H. Sullivan\"; // <span class=\"pl-4\">Monday </span><span class=\"pl-4\">May 9</span><p> Mrs. Jervis</p><p>Dear Madam,\n          // </p><p>The Dr. pronounced</p><p>Very regard</p><p><span class=\"pl-4\">Truly yours,\n          // </span></p><p><span span class=\"pl-4\">J. H. Sullivan</span></p>\n\n          testTextToArray = testText.split(\"\");\n          paragraphOpen = false;\n          spanOpen = false;\n          inputArray = testTextToArray;\n\n          for (i = 0; i < inputArray.length; i++) {\n            if (!spanOpen) {\n              if (!paragraphOpen && inputArray[i] == \"\\t\" && inputArray[i - 1] == \"</span></p>\") {\n                paragraphOpen = true;\n                spanOpen = true;\n                inputArray[i] = '<p><span class=\"pl-4\">';\n              }\n\n              if (inputArray[i] == \"\\t\") {\n                spanOpen = true;\n                inputArray[i] = '<span class=\"pl-4\">';\n              }\n            }\n\n            if (spanOpen && !paragraphOpen) {\n              if (testTextToArray[i] == \"\\r\") {\n                spanOpen = false;\n                paragraphOpen = true;\n                testTextToArray[i] = \"</span><p>\";\n              }\n\n              if (inputArray[i] == \"\\t\") {\n                inputArray[i] = '</span><span class=\"pl-4\">';\n              }\n            }\n\n            if (!paragraphOpen) {\n              if (inputArray[i] == \"\\r\") {\n                paragraphOpen = true;\n                inputArray[i] = \"<p>\";\n              }\n            }\n\n            if (paragraphOpen && !spanOpen) {\n              if (inputArray[i] == \"\\r\") {\n                paragraphOpen = true;\n                inputArray[i] = \"</p><p>\";\n              }\n\n              if (inputArray[i] == \"\\t\" && inputArray[i + 1] == \"\\r\") {\n                paragraphOpen = true;\n                inputArray[i] = \"</p>\";\n              }\n            }\n\n            if (i == inputArray.length - 1) {\n              if (paragraphOpen && spanOpen) {\n                inputArray.push(\"</span></p>\");\n                paragraphOpen = false;\n                spanOpen = false;\n              }\n\n              if (paragraphOpen) {\n                inputArray.push(\"</p>\");\n                paragraphOpen = false;\n              }\n\n              if (spanOpen) {\n                inputArray.push(\"</span>\");\n                spanOpen = false;\n              }\n            }\n\n            if (spanOpen && paragraphOpen) {\n              if (inputArray[i] == \"\\r\") {\n                paragraphOpen = false;\n                spanOpen = false;\n                inputArray[i] = \"</span></p>\";\n              }\n            }\n          }\n\n          console.log(inputArray.join(\"\"));\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/charlescarrier/Dev/marylandLettersProject/frontend/pages/index.js"],"names":["fetch","Fragment","Index","props","__html","data","map","letter","letter_id","text","fromFirstName","getInitialProps","response","json","textToArray","split","testText","testTextToArray","paragraphOpen","spanOpen","inputArray","i","length","push","console","log","join"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { Fragment } from \"react\";\n\nconst Index = props => {\n  return (\n    <div className=\"container m-4\">\n      <div dangerouslySetInnerHTML={{ __html: props.data }} />\n      {props.data.map(letter => {\n        return (\n          <div key={letter.letter_id}>\n            <p>{letter.text}</p>\n            <br />\n            <p>{letter.fromFirstName}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nIndex.getInitialProps = async () => {\n  const response = await fetch(\"http://localhost:5500/api/letter/1\");\n  const data = await response.json();\n  let textToArray = data[0].text.split(\"\");\n  let testText =\n    \"\\tMonday \\tMay 9\\rMrs. Jervis\\rDear Madam,\\rThe Dr. pronounced\\rVery regard\\r\\tTruly yours,\\r\\tJ. H. Sullivan\";\n  // <span class=\"pl-4\">Monday </span><span class=\"pl-4\">May 9</span><p> Mrs. Jervis</p><p>Dear Madam,\n  // </p><p>The Dr. pronounced</p><p>Very regard</p><p><span class=\"pl-4\">Truly yours,\n  // </span></p><p><span span class=\"pl-4\">J. H. Sullivan</span></p>\n  let testTextToArray = testText.split(\"\");\n  let paragraphOpen = false;\n  let spanOpen = false;\n\n  let inputArray = testTextToArray;\n\n  for (let i = 0; i < inputArray.length; i++) {\n    if (!spanOpen) {\n      if (\n        !paragraphOpen &&\n        inputArray[i] == \"\\t\" &&\n        inputArray[i - 1] == \"</span></p>\"\n      ) {\n        paragraphOpen = true;\n        spanOpen = true;\n        inputArray[i] = '<p><span class=\"pl-4\">';\n      }\n      if (inputArray[i] == \"\\t\") {\n        spanOpen = true;\n        inputArray[i] = '<span class=\"pl-4\">';\n      }\n    }\n    if (spanOpen && !paragraphOpen) {\n      if (testTextToArray[i] == \"\\r\") {\n        spanOpen = false;\n        paragraphOpen = true;\n        testTextToArray[i] = \"</span><p>\";\n      }\n      if (inputArray[i] == \"\\t\") {\n        inputArray[i] = '</span><span class=\"pl-4\">';\n      }\n    }\n    if (!paragraphOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"<p>\";\n      }\n    }\n    if (paragraphOpen && !spanOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"</p><p>\";\n      }\n      if (inputArray[i] == \"\\t\" && inputArray[i + 1] == \"\\r\") {\n        paragraphOpen = true;\n        inputArray[i] = \"</p>\";\n      }\n    }\n    if (i == inputArray.length - 1) {\n      if (paragraphOpen && spanOpen) {\n        inputArray.push(\"</span></p>\");\n        paragraphOpen = false;\n        spanOpen = false;\n      }\n      if (paragraphOpen) {\n        inputArray.push(\"</p>\");\n        paragraphOpen = false;\n      }\n      if (spanOpen) {\n        inputArray.push(\"</span>\");\n        spanOpen = false;\n      }\n    }\n    if (spanOpen && paragraphOpen) {\n      if (inputArray[i] == \"\\r\") {\n        paragraphOpen = false;\n        spanOpen = false;\n        inputArray[i] = \"</span></p>\";\n      }\n    }\n  }\n\n  console.log(inputArray.join(\"\"));\n  return { data: data };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}